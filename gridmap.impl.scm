(use data-structures srfi-1 alist-lib)

(define-record gridmap grid layers width height depth)
(define-record gridarea x y width height)
(define-record point x y)

(define (within min max val)
 (and (< val max) (<= min val)))

(define (make-grid x y #!optional (layers 1))
  (let ((g (make-gridmap (make-vector (* x y layers) '()) (make-list layers '()) x y layers)))
	g))

(define (set-layer! g layer key value)
  (alist-set! (list-ref (gridmap-layers g) layer) key value))

(define (offset xmax ymax zmax x y z)
 (+ x (* y xmax) (* z xmax ymax)))

(define (get-cell g x y layer)
  (let (( height (gridmap-height g))
        ( width  (gridmap-width  g))
	( depth  (gridmap-depth  g)))
   (if (and (within 0 width x)
            (within 0 heigth y)
            (within 0 depth layer))
      (vector-ref (gridmap-grid g) (offset width height depth x y layer))
      #f)))

(define (set-cell! g x y layer)
  (let (( height (gridmap-height g))
        ( width  (gridmap-width  g))
	( depth  (gridmap-depth  g)))
   (if (and (within 0 width x)
            (within 0 heigth y)
            (within 0 depth layer))
     (vector-set! (gridmap-grid g) (offset width height depth x y layer)))))

(define (map-grid proc g area)
  (let ((startx (gridarea-x area))
	(starty (gridarea-y area))
	(stopx  (+ (gridarea-x area) (gridarea-width area)))
	(stopy  (+ (gridarea-y area) (gridarea-height area)))
	(maxx (gridmap-width g))
	(maxy (gridmap-height g))
	(maxz (gridmap-depth g)))
    (if (and (< startx stopx) (< starty stopy)
	     (within 0 maxx startx) (within 0 maxx stopx)
	     (within 0 maxy starty) (within 0 maxy stopy))
	(let loopz ((z 0) (l '()))
	  (if (< z maxz)
	      (loopz (+ 1 z)
		     (let loopy ((y starty) (l l))
		       (if (< y stopy)
			   (loopy (+ 1 y)
				  (let loopx ((x startx) (l l))
				    (if (< x stopx)
					(loopx (+ i x) (cons (proc x y z ) l))
					l)))
			     l)))
		l)))))

  
  
(define (foreach-grid proc g area)
  (let ((startx (gridarea-x area))
	(starty (gridarea-y area))
	(stopx  (+ (gridarea-x area) (gridarea-width area)))
	(stopy  (+ (gridarea-y area) (gridarea-height area)))
	(maxx (+ 1(gridmap-width g)))
	(maxy (+ 1(gridmap-height g)))
	(maxz (gridmap-depth g)))
    (if (and (< startx stopx) (< starty stopy)
	     (within 0 maxx startx) (within 0 maxx stopx)
	     (within 0 maxy starty) (within 0 maxy stopy))
	(let loopz ((z 0) (l '()))
	  (if (< z maxz)
	      (loopz (+ 1 z)
		     (let loopy ((y starty) (l l))
		       (if (< y stopy)
			   (loopy (+ 1 y)
				  (let loopx ((x startx) (l l))
				    (if (< x stopx)
					(loopx (+ 1 x) (proc x y z ))
					l)))
			     l)))
		l)))))


(define ((screen->grid origin edge) point)
  (make-point (- (quotient (point-x point) edge) (point-x origin))
	      (- (quotient (point-y point) edge) (point-y origin))))


